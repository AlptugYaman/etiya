// Mocks generated by Mockito 5.3.0 from annotations
// in etiya/test/helpers/test_helpers.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:dartz/dartz.dart' as _i2;
import 'package:dio/dio.dart' as _i5;
import 'package:etiya/src/core/network/network_exception.dart' as _i8;
import 'package:etiya/src/core/network/network_manager.dart' as _i13;
import 'package:etiya/src/data/datasources/remote/remote_data_source.dart'
    as _i12;
import 'package:etiya/src/data/models/playlist/playlist.dart' as _i4;
import 'package:etiya/src/data/models/playlist_track/playlist_track.dart'
    as _i3;
import 'package:etiya/src/domain/entites/local_playlist_track.dart' as _i11;
import 'package:etiya/src/domain/entites/playlist/playlist.dart' as _i9;
import 'package:etiya/src/domain/entites/playlist_track/playlist_track.dart'
    as _i10;
import 'package:etiya/src/domain/repositories/playlist_track_repository.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlaylistTrackModel_1 extends _i1.SmartFake
    implements _i3.PlaylistTrackModel {
  _FakePlaylistTrackModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePlaylistModel_2 extends _i1.SmartFake implements _i4.PlaylistModel {
  _FakePlaylistModel_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDio_3 extends _i1.SmartFake implements _i5.Dio {
  _FakeDio_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [PlaylistRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlaylistRepository extends _i1.Mock
    implements _i6.PlaylistRepository {
  MockPlaylistRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<
      _i2
          .Either<_i8.NetworkExceptions, _i9.Playlist>> getPlaylistData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaylistData,
          [],
        ),
        returnValue:
            _i7.Future<_i2.Either<_i8.NetworkExceptions, _i9.Playlist>>.value(
                _FakeEither_0<_i8.NetworkExceptions, _i9.Playlist>(
          this,
          Invocation.method(
            #getPlaylistData,
            [],
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.NetworkExceptions, _i9.Playlist>>);
  @override
  _i7.Future<
      _i2.Either<_i8.NetworkExceptions, _i10.PlaylistTrack>> getPlaylistTracks({
    int? offset,
    int? limit,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaylistTracks,
          [],
          {
            #offset: offset,
            #limit: limit,
          },
        ),
        returnValue: _i7.Future<
                _i2.Either<_i8.NetworkExceptions, _i10.PlaylistTrack>>.value(
            _FakeEither_0<_i8.NetworkExceptions, _i10.PlaylistTrack>(
          this,
          Invocation.method(
            #getPlaylistTracks,
            [],
            {
              #offset: offset,
              #limit: limit,
            },
          ),
        )),
      ) as _i7.Future<_i2.Either<_i8.NetworkExceptions, _i10.PlaylistTrack>>);
  @override
  _i7.Future<void> insertPlaylistTracksToLocal(
          {_i11.LocalPlaylistTrack? localPlaylistTrack}) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertPlaylistTracksToLocal,
          [],
          {#localPlaylistTrack: localPlaylistTrack},
        ),
        returnValue: _i7.Future<void>.value(),
        returnValueForMissingStub: _i7.Future<void>.value(),
      ) as _i7.Future<void>);
  @override
  _i7.Future<List<_i11.LocalPlaylistTrack>?> getLocalPlaylistTracks(
          String? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocalPlaylistTracks,
          [input],
        ),
        returnValue: _i7.Future<List<_i11.LocalPlaylistTrack>?>.value(),
      ) as _i7.Future<List<_i11.LocalPlaylistTrack>?>);
}

/// A class which mocks [RemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteDataSource extends _i1.Mock implements _i12.RemoteDataSource {
  MockRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i3.PlaylistTrackModel> getPlaylistTracks(
    int? offset,
    int? limit,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaylistTracks,
          [
            offset,
            limit,
          ],
        ),
        returnValue:
            _i7.Future<_i3.PlaylistTrackModel>.value(_FakePlaylistTrackModel_1(
          this,
          Invocation.method(
            #getPlaylistTracks,
            [
              offset,
              limit,
            ],
          ),
        )),
      ) as _i7.Future<_i3.PlaylistTrackModel>);
  @override
  _i7.Future<_i4.PlaylistModel> getPlaylistData() => (super.noSuchMethod(
        Invocation.method(
          #getPlaylistData,
          [],
        ),
        returnValue: _i7.Future<_i4.PlaylistModel>.value(_FakePlaylistModel_2(
          this,
          Invocation.method(
            #getPlaylistData,
            [],
          ),
        )),
      ) as _i7.Future<_i4.PlaylistModel>);
}

/// A class which mocks [NetworkManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockNetworkManager extends _i1.Mock implements _i13.NetworkManager {
  MockNetworkManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Dio get dio => (super.noSuchMethod(
        Invocation.getter(#dio),
        returnValue: _FakeDio_3(
          this,
          Invocation.getter(#dio),
        ),
      ) as _i5.Dio);
}
