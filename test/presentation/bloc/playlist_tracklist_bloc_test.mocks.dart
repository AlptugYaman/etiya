// Mocks generated by Mockito 5.3.0 from annotations
// in etiya/test/presentation/bloc/playlist_tracklist_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:etiya/src/core/network/network_exception.dart' as _i5;
import 'package:etiya/src/domain/entites/local_playlist_track.dart' as _i8;
import 'package:etiya/src/domain/entites/playlist/playlist.dart' as _i7;
import 'package:etiya/src/domain/entites/playlist_track/playlist_track.dart'
    as _i6;
import 'package:etiya/src/domain/usecases/get_playlist_tracks.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetPlaylist].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPlaylist extends _i1.Mock implements _i3.GetPlaylist {
  MockGetPlaylist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.NetworkExceptions, _i6.PlaylistTrack>>
      getPlaylistTracks(
    int? offset,
    int? limit,
  ) =>
          (super.noSuchMethod(
            Invocation.method(
              #getPlaylistTracks,
              [
                offset,
                limit,
              ],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.NetworkExceptions, _i6.PlaylistTrack>>.value(
                _FakeEither_0<_i5.NetworkExceptions, _i6.PlaylistTrack>(
              this,
              Invocation.method(
                #getPlaylistTracks,
                [
                  offset,
                  limit,
                ],
              ),
            )),
          ) as _i4
              .Future<_i2.Either<_i5.NetworkExceptions, _i6.PlaylistTrack>>);
  @override
  _i4.Future<
      _i2
          .Either<_i5.NetworkExceptions, _i7.Playlist>> getPlaylistData() =>
      (super.noSuchMethod(
        Invocation.method(
          #getPlaylistData,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.NetworkExceptions, _i7.Playlist>>.value(
                _FakeEither_0<_i5.NetworkExceptions, _i7.Playlist>(
          this,
          Invocation.method(
            #getPlaylistData,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.NetworkExceptions, _i7.Playlist>>);
  @override
  _i4.Future<void> insertPlaylistTracksToLocal(
          _i8.LocalPlaylistTrack? localPlaylistTrack) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertPlaylistTracksToLocal,
          [localPlaylistTrack],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
  @override
  _i4.Future<List<_i8.LocalPlaylistTrack>?> getLocalPlaylistTracks(
          String? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #getLocalPlaylistTracks,
          [input],
        ),
        returnValue: _i4.Future<List<_i8.LocalPlaylistTrack>?>.value(),
      ) as _i4.Future<List<_i8.LocalPlaylistTrack>?>);
}
